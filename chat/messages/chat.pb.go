// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: chat.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Register a username
type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Registration) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Registration) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Registration) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   int32  `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	NumOfChunk int32  `protobuf:"varint,3,opt,name=numOfChunk,proto3" json:"numOfChunk,omitempty"`
	DirName    string `protobuf:"bytes,4,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *PutRequest) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *PutRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PutRequest) GetNumOfChunk() int32 {
	if x != nil {
		return x.NumOfChunk
	}
	return 0
}

func (x *PutRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

//Send the job
type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   int32  `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ReduceNum  int32  `protobuf:"varint,3,opt,name=reduceNum,proto3" json:"reduceNum,omitempty"`
	DirName    string `protobuf:"bytes,4,opt,name=dirName,proto3" json:"dirName,omitempty"`
	JobContent []byte `protobuf:"bytes,5,opt,name=jobContent,proto3" json:"jobContent,omitempty"`
	JobName    string `protobuf:"bytes,6,opt,name=jobName,proto3" json:"jobName,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitJobRequest) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *SubmitJobRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SubmitJobRequest) GetReduceNum() int32 {
	if x != nil {
		return x.ReduceNum
	}
	return 0
}

func (x *SubmitJobRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *SubmitJobRequest) GetJobContent() []byte {
	if x != nil {
		return x.JobContent
	}
	return nil
}

func (x *SubmitJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

//Send the map Task
type SendMapTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string       `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	DirName    string       `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
	ChunkIdx   int32        `protobuf:"varint,3,opt,name=chunkIdx,proto3" json:"chunkIdx,omitempty"`
	JobContent []byte       `protobuf:"bytes,4,opt,name=jobContent,proto3" json:"jobContent,omitempty"`
	JobName    string       `protobuf:"bytes,5,opt,name=jobName,proto3" json:"jobName,omitempty"`
	JobId      uint32       `protobuf:"varint,6,opt,name=jobId,proto3" json:"jobId,omitempty"`
	NodeList   []*StoreNode `protobuf:"bytes,7,rep,name=nodeList,proto3" json:"nodeList,omitempty"` //reduce nodes
}

func (x *SendMapTask) Reset() {
	*x = SendMapTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMapTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMapTask) ProtoMessage() {}

func (x *SendMapTask) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMapTask.ProtoReflect.Descriptor instead.
func (*SendMapTask) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *SendMapTask) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SendMapTask) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *SendMapTask) GetChunkIdx() int32 {
	if x != nil {
		return x.ChunkIdx
	}
	return 0
}

func (x *SendMapTask) GetJobContent() []byte {
	if x != nil {
		return x.JobContent
	}
	return nil
}

func (x *SendMapTask) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SendMapTask) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *SendMapTask) GetNodeList() []*StoreNode {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkMap map[string]*ChunkNodeInfo `protobuf:"bytes,1,rep,name=chunkMap,proto3" json:"chunkMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DirName  string                    `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *PutResponse) GetChunkMap() map[string]*ChunkNodeInfo {
	if x != nil {
		return x.ChunkMap
	}
	return nil
}

func (x *PutResponse) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	DirName  string `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
	Id       int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *GetRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *GetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetResponse map[string]*NodeMap `protobuf:"bytes,1,rep,name=getResponse,proto3" json:"getResponse,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DirName     string              `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *GetResponse) GetGetResponse() map[string]*NodeMap {
	if x != nil {
		return x.GetResponse
	}
	return nil
}

func (x *GetResponse) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type StoreNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *StoreNode) Reset() {
	*x = StoreNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreNode) ProtoMessage() {}

func (x *StoreNode) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreNode.ProtoReflect.Descriptor instead.
func (*StoreNode) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *StoreNode) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StoreNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type NodeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeMap map[int32]*ChunkNodeInfo `protobuf:"bytes,1,rep,name=nodeMap,proto3" json:"nodeMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeMap) Reset() {
	*x = NodeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMap) ProtoMessage() {}

func (x *NodeMap) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMap.ProtoReflect.Descriptor instead.
func (*NodeMap) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

func (x *NodeMap) GetNodeMap() map[int32]*ChunkNodeInfo {
	if x != nil {
		return x.NodeMap
	}
	return nil
}

type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Host             string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port             int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	FreeSpace        int64  `protobuf:"varint,4,opt,name=free_space,json=freeSpace,proto3" json:"free_space,omitempty"`
	NumberOfRequests int64  `protobuf:"varint,5,opt,name=number_of_requests,json=numberOfRequests,proto3" json:"number_of_requests,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{9}
}

func (x *HeartBeat) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HeartBeat) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HeartBeat) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HeartBeat) GetFreeSpace() int64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *HeartBeat) GetNumberOfRequests() int64 {
	if x != nil {
		return x.NumberOfRequests
	}
	return 0
}

type ReplicaChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // list index
	NodeLists  []*StoreNode `protobuf:"bytes,2,rep,name=nodeLists,proto3" json:"nodeLists,omitempty"`
	Chunk      []byte       `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileName   string       `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	CheckIndex int32        `protobuf:"varint,5,opt,name=check_index,json=checkIndex,proto3" json:"check_index,omitempty"`
	DirName    string       `protobuf:"bytes,6,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *ReplicaChunk) Reset() {
	*x = ReplicaChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaChunk) ProtoMessage() {}

func (x *ReplicaChunk) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaChunk.ProtoReflect.Descriptor instead.
func (*ReplicaChunk) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{10}
}

func (x *ReplicaChunk) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ReplicaChunk) GetNodeLists() []*StoreNode {
	if x != nil {
		return x.NodeLists
	}
	return nil
}

func (x *ReplicaChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *ReplicaChunk) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReplicaChunk) GetCheckIndex() int32 {
	if x != nil {
		return x.CheckIndex
	}
	return 0
}

func (x *ReplicaChunk) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type FileNotExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *FileNotExist) Reset() {
	*x = FileNotExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNotExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNotExist) ProtoMessage() {}

func (x *FileNotExist) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNotExist.ProtoReflect.Descriptor instead.
func (*FileNotExist) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{11}
}

func (x *FileNotExist) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileNotExist) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type FileExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *FileExist) Reset() {
	*x = FileExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileExist) ProtoMessage() {}

func (x *FileExist) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileExist.ProtoReflect.Descriptor instead.
func (*FileExist) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{12}
}

func (x *FileExist) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type AckReplicaChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaSuccess bool   `protobuf:"varint,1,opt,name=replica_success,json=replicaSuccess,proto3" json:"replica_success,omitempty"`
	Id             int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	FileName       string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	ChunkIndex     int32  `protobuf:"varint,4,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
}

func (x *AckReplicaChunk) Reset() {
	*x = AckReplicaChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckReplicaChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckReplicaChunk) ProtoMessage() {}

func (x *AckReplicaChunk) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckReplicaChunk.ProtoReflect.Descriptor instead.
func (*AckReplicaChunk) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{13}
}

func (x *AckReplicaChunk) GetReplicaSuccess() bool {
	if x != nil {
		return x.ReplicaSuccess
	}
	return false
}

func (x *AckReplicaChunk) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AckReplicaChunk) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AckReplicaChunk) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

type GetReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientHost string `protobuf:"bytes,1,opt,name=clientHost,proto3" json:"clientHost,omitempty"`
	ClientPort int32  `protobuf:"varint,2,opt,name=clientPort,proto3" json:"clientPort,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	ChunkIndex int32  `protobuf:"varint,4,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	DirName    string `protobuf:"bytes,5,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *GetReplica) Reset() {
	*x = GetReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplica) ProtoMessage() {}

func (x *GetReplica) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplica.ProtoReflect.Descriptor instead.
func (*GetReplica) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{14}
}

func (x *GetReplica) GetClientHost() string {
	if x != nil {
		return x.ClientHost
	}
	return ""
}

func (x *GetReplica) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *GetReplica) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetReplica) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *GetReplica) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type ReturnReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReturnReplica) Reset() {
	*x = ReturnReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnReplica) ProtoMessage() {}

func (x *ReturnReplica) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnReplica.ProtoReflect.Descriptor instead.
func (*ReturnReplica) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{15}
}

func (x *ReturnReplica) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *ReturnReplica) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteReplicas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName          string  `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	DirName           string  `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
	ChunkToDeleteList []int32 `protobuf:"varint,3,rep,packed,name=chunkToDeleteList,proto3" json:"chunkToDeleteList,omitempty"`
}

func (x *DeleteReplicas) Reset() {
	*x = DeleteReplicas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicas) ProtoMessage() {}

func (x *DeleteReplicas) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicas.ProtoReflect.Descriptor instead.
func (*DeleteReplicas) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteReplicas) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DeleteReplicas) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *DeleteReplicas) GetChunkToDeleteList() []int32 {
	if x != nil {
		return x.ChunkToDeleteList
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	ClientId int32  `protobuf:"varint,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DeleteRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DeleteRequest) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type ChunkNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeList []*StoreNode `protobuf:"bytes,1,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
}

func (x *ChunkNodeInfo) Reset() {
	*x = ChunkNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkNodeInfo) ProtoMessage() {}

func (x *ChunkNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkNodeInfo.ProtoReflect.Descriptor instead.
func (*ChunkNodeInfo) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{18}
}

func (x *ChunkNodeInfo) GetNodeList() []*StoreNode {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type GetMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMapRequest) Reset() {
	*x = GetMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapRequest) ProtoMessage() {}

func (x *GetMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapRequest.ProtoReflect.Descriptor instead.
func (*GetMapRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{19}
}

func (x *GetMapRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type LsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId int32  `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	DirName  string `protobuf:"bytes,2,opt,name=dirName,proto3" json:"dirName,omitempty"`
}

func (x *LsRequest) Reset() {
	*x = LsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsRequest) ProtoMessage() {}

func (x *LsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsRequest.ProtoReflect.Descriptor instead.
func (*LsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{20}
}

func (x *LsRequest) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *LsRequest) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type LsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *LsResponse) Reset() {
	*x = LsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsResponse) ProtoMessage() {}

func (x *LsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsResponse.ProtoReflect.Descriptor instead.
func (*LsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{21}
}

func (x *LsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type SendMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMap map[int32]*HeartBeat `protobuf:"bytes,1,rep,name=dataMap,proto3" json:"dataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendMapResponse) Reset() {
	*x = SendMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMapResponse) ProtoMessage() {}

func (x *SendMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMapResponse.ProtoReflect.Descriptor instead.
func (*SendMapResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{22}
}

func (x *SendMapResponse) GetDataMap() map[int32]*HeartBeat {
	if x != nil {
		return x.DataMap
	}
	return nil
}

type Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*Wrapper_RegistrationMessage
	//	*Wrapper_PutRequest
	//	*Wrapper_PutResponse
	//	*Wrapper_HeartbeatMessage
	//	*Wrapper_ReplicaChunkMessage
	//	*Wrapper_AckReplicaChunkMessage
	//	*Wrapper_GetReplicaMessage
	//	*Wrapper_ReturnChunkMessage
	//	*Wrapper_DeleteReplicasMessage
	//	*Wrapper_ChunkNodeInfoMessage
	//	*Wrapper_GetMapRequestMessage
	//	*Wrapper_SendMapResponseMessage
	//	*Wrapper_GetRequestMessage
	//	*Wrapper_GetResponseMessage
	//	*Wrapper_NodeMapMessage
	//	*Wrapper_FileNotExistMessage
	//	*Wrapper_DeleteRequestMessage
	//	*Wrapper_LsRequestMessage
	//	*Wrapper_LsResponseMessage
	//	*Wrapper_FileExistMessage
	//	*Wrapper_SubmitJobMessage
	//	*Wrapper_SendMapTask
	Msg isWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *Wrapper) Reset() {
	*x = Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapper) ProtoMessage() {}

func (x *Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapper.ProtoReflect.Descriptor instead.
func (*Wrapper) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{23}
}

func (m *Wrapper) GetMsg() isWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Wrapper) GetRegistrationMessage() *Registration {
	if x, ok := x.GetMsg().(*Wrapper_RegistrationMessage); ok {
		return x.RegistrationMessage
	}
	return nil
}

func (x *Wrapper) GetPutRequest() *PutRequest {
	if x, ok := x.GetMsg().(*Wrapper_PutRequest); ok {
		return x.PutRequest
	}
	return nil
}

func (x *Wrapper) GetPutResponse() *PutResponse {
	if x, ok := x.GetMsg().(*Wrapper_PutResponse); ok {
		return x.PutResponse
	}
	return nil
}

func (x *Wrapper) GetHeartbeatMessage() *HeartBeat {
	if x, ok := x.GetMsg().(*Wrapper_HeartbeatMessage); ok {
		return x.HeartbeatMessage
	}
	return nil
}

func (x *Wrapper) GetReplicaChunkMessage() *ReplicaChunk {
	if x, ok := x.GetMsg().(*Wrapper_ReplicaChunkMessage); ok {
		return x.ReplicaChunkMessage
	}
	return nil
}

func (x *Wrapper) GetAckReplicaChunkMessage() *AckReplicaChunk {
	if x, ok := x.GetMsg().(*Wrapper_AckReplicaChunkMessage); ok {
		return x.AckReplicaChunkMessage
	}
	return nil
}

func (x *Wrapper) GetGetReplicaMessage() *GetReplica {
	if x, ok := x.GetMsg().(*Wrapper_GetReplicaMessage); ok {
		return x.GetReplicaMessage
	}
	return nil
}

func (x *Wrapper) GetReturnChunkMessage() *ReturnReplica {
	if x, ok := x.GetMsg().(*Wrapper_ReturnChunkMessage); ok {
		return x.ReturnChunkMessage
	}
	return nil
}

func (x *Wrapper) GetDeleteReplicasMessage() *DeleteReplicas {
	if x, ok := x.GetMsg().(*Wrapper_DeleteReplicasMessage); ok {
		return x.DeleteReplicasMessage
	}
	return nil
}

func (x *Wrapper) GetChunkNodeInfoMessage() *ChunkNodeInfo {
	if x, ok := x.GetMsg().(*Wrapper_ChunkNodeInfoMessage); ok {
		return x.ChunkNodeInfoMessage
	}
	return nil
}

func (x *Wrapper) GetGetMapRequestMessage() *GetMapRequest {
	if x, ok := x.GetMsg().(*Wrapper_GetMapRequestMessage); ok {
		return x.GetMapRequestMessage
	}
	return nil
}

func (x *Wrapper) GetSendMapResponseMessage() *SendMapResponse {
	if x, ok := x.GetMsg().(*Wrapper_SendMapResponseMessage); ok {
		return x.SendMapResponseMessage
	}
	return nil
}

func (x *Wrapper) GetGetRequestMessage() *GetRequest {
	if x, ok := x.GetMsg().(*Wrapper_GetRequestMessage); ok {
		return x.GetRequestMessage
	}
	return nil
}

func (x *Wrapper) GetGetResponseMessage() *GetResponse {
	if x, ok := x.GetMsg().(*Wrapper_GetResponseMessage); ok {
		return x.GetResponseMessage
	}
	return nil
}

func (x *Wrapper) GetNodeMapMessage() *NodeMap {
	if x, ok := x.GetMsg().(*Wrapper_NodeMapMessage); ok {
		return x.NodeMapMessage
	}
	return nil
}

func (x *Wrapper) GetFileNotExistMessage() *FileNotExist {
	if x, ok := x.GetMsg().(*Wrapper_FileNotExistMessage); ok {
		return x.FileNotExistMessage
	}
	return nil
}

func (x *Wrapper) GetDeleteRequestMessage() *DeleteRequest {
	if x, ok := x.GetMsg().(*Wrapper_DeleteRequestMessage); ok {
		return x.DeleteRequestMessage
	}
	return nil
}

func (x *Wrapper) GetLsRequestMessage() *LsRequest {
	if x, ok := x.GetMsg().(*Wrapper_LsRequestMessage); ok {
		return x.LsRequestMessage
	}
	return nil
}

func (x *Wrapper) GetLsResponseMessage() *LsResponse {
	if x, ok := x.GetMsg().(*Wrapper_LsResponseMessage); ok {
		return x.LsResponseMessage
	}
	return nil
}

func (x *Wrapper) GetFileExistMessage() *FileExist {
	if x, ok := x.GetMsg().(*Wrapper_FileExistMessage); ok {
		return x.FileExistMessage
	}
	return nil
}

func (x *Wrapper) GetSubmitJobMessage() *SubmitJobRequest {
	if x, ok := x.GetMsg().(*Wrapper_SubmitJobMessage); ok {
		return x.SubmitJobMessage
	}
	return nil
}

func (x *Wrapper) GetSendMapTask() *SendMapTask {
	if x, ok := x.GetMsg().(*Wrapper_SendMapTask); ok {
		return x.SendMapTask
	}
	return nil
}

type isWrapper_Msg interface {
	isWrapper_Msg()
}

type Wrapper_RegistrationMessage struct {
	RegistrationMessage *Registration `protobuf:"bytes,1,opt,name=registration_message,json=registrationMessage,proto3,oneof"`
}

type Wrapper_PutRequest struct {
	PutRequest *PutRequest `protobuf:"bytes,2,opt,name=put_request,json=putRequest,proto3,oneof"`
}

type Wrapper_PutResponse struct {
	PutResponse *PutResponse `protobuf:"bytes,3,opt,name=put_response,json=putResponse,proto3,oneof"`
}

type Wrapper_HeartbeatMessage struct {
	HeartbeatMessage *HeartBeat `protobuf:"bytes,4,opt,name=heartbeat_message,json=heartbeatMessage,proto3,oneof"`
}

type Wrapper_ReplicaChunkMessage struct {
	ReplicaChunkMessage *ReplicaChunk `protobuf:"bytes,5,opt,name=replicaChunk_message,json=replicaChunkMessage,proto3,oneof"`
}

type Wrapper_AckReplicaChunkMessage struct {
	AckReplicaChunkMessage *AckReplicaChunk `protobuf:"bytes,6,opt,name=ack_replica_chunk_message,json=ackReplicaChunkMessage,proto3,oneof"`
}

type Wrapper_GetReplicaMessage struct {
	GetReplicaMessage *GetReplica `protobuf:"bytes,7,opt,name=get_replica_message,json=getReplicaMessage,proto3,oneof"`
}

type Wrapper_ReturnChunkMessage struct {
	ReturnChunkMessage *ReturnReplica `protobuf:"bytes,8,opt,name=return_chunk_message,json=returnChunkMessage,proto3,oneof"`
}

type Wrapper_DeleteReplicasMessage struct {
	DeleteReplicasMessage *DeleteReplicas `protobuf:"bytes,9,opt,name=delete_replicas_message,json=deleteReplicasMessage,proto3,oneof"`
}

type Wrapper_ChunkNodeInfoMessage struct {
	ChunkNodeInfoMessage *ChunkNodeInfo `protobuf:"bytes,10,opt,name=chunk_node_info_message,json=chunkNodeInfoMessage,proto3,oneof"`
}

type Wrapper_GetMapRequestMessage struct {
	GetMapRequestMessage *GetMapRequest `protobuf:"bytes,11,opt,name=get_map_request_message,json=getMapRequestMessage,proto3,oneof"`
}

type Wrapper_SendMapResponseMessage struct {
	SendMapResponseMessage *SendMapResponse `protobuf:"bytes,12,opt,name=send_map_response_message,json=sendMapResponseMessage,proto3,oneof"`
}

type Wrapper_GetRequestMessage struct {
	GetRequestMessage *GetRequest `protobuf:"bytes,13,opt,name=get_request_message,json=getRequestMessage,proto3,oneof"`
}

type Wrapper_GetResponseMessage struct {
	GetResponseMessage *GetResponse `protobuf:"bytes,14,opt,name=get_response_message,json=getResponseMessage,proto3,oneof"`
}

type Wrapper_NodeMapMessage struct {
	NodeMapMessage *NodeMap `protobuf:"bytes,15,opt,name=nodeMap_message,json=nodeMapMessage,proto3,oneof"`
}

type Wrapper_FileNotExistMessage struct {
	FileNotExistMessage *FileNotExist `protobuf:"bytes,16,opt,name=file_not_exist_message,json=fileNotExistMessage,proto3,oneof"`
}

type Wrapper_DeleteRequestMessage struct {
	DeleteRequestMessage *DeleteRequest `protobuf:"bytes,17,opt,name=delete_request_message,json=deleteRequestMessage,proto3,oneof"`
}

type Wrapper_LsRequestMessage struct {
	LsRequestMessage *LsRequest `protobuf:"bytes,18,opt,name=ls_request_message,json=lsRequestMessage,proto3,oneof"`
}

type Wrapper_LsResponseMessage struct {
	LsResponseMessage *LsResponse `protobuf:"bytes,19,opt,name=ls_response_message,json=lsResponseMessage,proto3,oneof"`
}

type Wrapper_FileExistMessage struct {
	FileExistMessage *FileExist `protobuf:"bytes,20,opt,name=file_exist_message,json=fileExistMessage,proto3,oneof"`
}

type Wrapper_SubmitJobMessage struct {
	SubmitJobMessage *SubmitJobRequest `protobuf:"bytes,21,opt,name=submit_job_message,json=submitJobMessage,proto3,oneof"`
}

type Wrapper_SendMapTask struct {
	SendMapTask *SendMapTask `protobuf:"bytes,22,opt,name=send_map_task,json=sendMapTask,proto3,oneof"`
}

func (*Wrapper_RegistrationMessage) isWrapper_Msg() {}

func (*Wrapper_PutRequest) isWrapper_Msg() {}

func (*Wrapper_PutResponse) isWrapper_Msg() {}

func (*Wrapper_HeartbeatMessage) isWrapper_Msg() {}

func (*Wrapper_ReplicaChunkMessage) isWrapper_Msg() {}

func (*Wrapper_AckReplicaChunkMessage) isWrapper_Msg() {}

func (*Wrapper_GetReplicaMessage) isWrapper_Msg() {}

func (*Wrapper_ReturnChunkMessage) isWrapper_Msg() {}

func (*Wrapper_DeleteReplicasMessage) isWrapper_Msg() {}

func (*Wrapper_ChunkNodeInfoMessage) isWrapper_Msg() {}

func (*Wrapper_GetMapRequestMessage) isWrapper_Msg() {}

func (*Wrapper_SendMapResponseMessage) isWrapper_Msg() {}

func (*Wrapper_GetRequestMessage) isWrapper_Msg() {}

func (*Wrapper_GetResponseMessage) isWrapper_Msg() {}

func (*Wrapper_NodeMapMessage) isWrapper_Msg() {}

func (*Wrapper_FileNotExistMessage) isWrapper_Msg() {}

func (*Wrapper_DeleteRequestMessage) isWrapper_Msg() {}

func (*Wrapper_LsRequestMessage) isWrapper_Msg() {}

func (*Wrapper_LsResponseMessage) isWrapper_Msg() {}

func (*Wrapper_FileExistMessage) isWrapper_Msg() {}

func (*Wrapper_SubmitJobMessage) isWrapper_Msg() {}

func (*Wrapper_SendMapTask) isWrapper_Msg() {}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x7e, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xac, 0x01,
	0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x4b, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x48, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x4a, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x90, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x27, 0x0a, 0x09, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa4,
	0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x63, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x41, 0x0a, 0x09, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x46, 0x0a, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa6, 0x0b, 0x0a, 0x07, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00,
	0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x19, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x48, 0x00,
	0x52, 0x11, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x17, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x16, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_chat_proto_goTypes = []interface{}{
	(*Registration)(nil),     // 0: Registration
	(*PutRequest)(nil),       // 1: PutRequest
	(*SubmitJobRequest)(nil), // 2: SubmitJobRequest
	(*SendMapTask)(nil),      // 3: SendMapTask
	(*PutResponse)(nil),      // 4: PutResponse
	(*GetRequest)(nil),       // 5: GetRequest
	(*GetResponse)(nil),      // 6: GetResponse
	(*StoreNode)(nil),        // 7: StoreNode
	(*NodeMap)(nil),          // 8: NodeMap
	(*HeartBeat)(nil),        // 9: HeartBeat
	(*ReplicaChunk)(nil),     // 10: ReplicaChunk
	(*FileNotExist)(nil),     // 11: FileNotExist
	(*FileExist)(nil),        // 12: FileExist
	(*AckReplicaChunk)(nil),  // 13: AckReplicaChunk
	(*GetReplica)(nil),       // 14: GetReplica
	(*ReturnReplica)(nil),    // 15: ReturnReplica
	(*DeleteReplicas)(nil),   // 16: DeleteReplicas
	(*DeleteRequest)(nil),    // 17: DeleteRequest
	(*ChunkNodeInfo)(nil),    // 18: ChunkNodeInfo
	(*GetMapRequest)(nil),    // 19: GetMapRequest
	(*LsRequest)(nil),        // 20: LsRequest
	(*LsResponse)(nil),       // 21: LsResponse
	(*SendMapResponse)(nil),  // 22: SendMapResponse
	(*Wrapper)(nil),          // 23: Wrapper
	nil,                      // 24: PutResponse.ChunkMapEntry
	nil,                      // 25: GetResponse.GetResponseEntry
	nil,                      // 26: NodeMap.NodeMapEntry
	nil,                      // 27: SendMapResponse.DataMapEntry
}
var file_chat_proto_depIdxs = []int32{
	7,  // 0: SendMapTask.nodeList:type_name -> StoreNode
	24, // 1: PutResponse.chunkMap:type_name -> PutResponse.ChunkMapEntry
	25, // 2: GetResponse.getResponse:type_name -> GetResponse.GetResponseEntry
	26, // 3: NodeMap.nodeMap:type_name -> NodeMap.NodeMapEntry
	7,  // 4: ReplicaChunk.nodeLists:type_name -> StoreNode
	7,  // 5: ChunkNodeInfo.nodeList:type_name -> StoreNode
	27, // 6: SendMapResponse.dataMap:type_name -> SendMapResponse.DataMapEntry
	0,  // 7: Wrapper.registration_message:type_name -> Registration
	1,  // 8: Wrapper.put_request:type_name -> PutRequest
	4,  // 9: Wrapper.put_response:type_name -> PutResponse
	9,  // 10: Wrapper.heartbeat_message:type_name -> HeartBeat
	10, // 11: Wrapper.replicaChunk_message:type_name -> ReplicaChunk
	13, // 12: Wrapper.ack_replica_chunk_message:type_name -> AckReplicaChunk
	14, // 13: Wrapper.get_replica_message:type_name -> GetReplica
	15, // 14: Wrapper.return_chunk_message:type_name -> ReturnReplica
	16, // 15: Wrapper.delete_replicas_message:type_name -> DeleteReplicas
	18, // 16: Wrapper.chunk_node_info_message:type_name -> ChunkNodeInfo
	19, // 17: Wrapper.get_map_request_message:type_name -> GetMapRequest
	22, // 18: Wrapper.send_map_response_message:type_name -> SendMapResponse
	5,  // 19: Wrapper.get_request_message:type_name -> GetRequest
	6,  // 20: Wrapper.get_response_message:type_name -> GetResponse
	8,  // 21: Wrapper.nodeMap_message:type_name -> NodeMap
	11, // 22: Wrapper.file_not_exist_message:type_name -> FileNotExist
	17, // 23: Wrapper.delete_request_message:type_name -> DeleteRequest
	20, // 24: Wrapper.ls_request_message:type_name -> LsRequest
	21, // 25: Wrapper.ls_response_message:type_name -> LsResponse
	12, // 26: Wrapper.file_exist_message:type_name -> FileExist
	2,  // 27: Wrapper.submit_job_message:type_name -> SubmitJobRequest
	3,  // 28: Wrapper.send_map_task:type_name -> SendMapTask
	18, // 29: PutResponse.ChunkMapEntry.value:type_name -> ChunkNodeInfo
	8,  // 30: GetResponse.GetResponseEntry.value:type_name -> NodeMap
	18, // 31: NodeMap.NodeMapEntry.value:type_name -> ChunkNodeInfo
	9,  // 32: SendMapResponse.DataMapEntry.value:type_name -> HeartBeat
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMapTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNotExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckReplicaChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chat_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Wrapper_RegistrationMessage)(nil),
		(*Wrapper_PutRequest)(nil),
		(*Wrapper_PutResponse)(nil),
		(*Wrapper_HeartbeatMessage)(nil),
		(*Wrapper_ReplicaChunkMessage)(nil),
		(*Wrapper_AckReplicaChunkMessage)(nil),
		(*Wrapper_GetReplicaMessage)(nil),
		(*Wrapper_ReturnChunkMessage)(nil),
		(*Wrapper_DeleteReplicasMessage)(nil),
		(*Wrapper_ChunkNodeInfoMessage)(nil),
		(*Wrapper_GetMapRequestMessage)(nil),
		(*Wrapper_SendMapResponseMessage)(nil),
		(*Wrapper_GetRequestMessage)(nil),
		(*Wrapper_GetResponseMessage)(nil),
		(*Wrapper_NodeMapMessage)(nil),
		(*Wrapper_FileNotExistMessage)(nil),
		(*Wrapper_DeleteRequestMessage)(nil),
		(*Wrapper_LsRequestMessage)(nil),
		(*Wrapper_LsResponseMessage)(nil),
		(*Wrapper_FileExistMessage)(nil),
		(*Wrapper_SubmitJobMessage)(nil),
		(*Wrapper_SendMapTask)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
